spring:
  application:
    name: config-client
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        serviceName: config-client #注册到consul的服务名称
        healthCheckPath: /actuator/health
        healthCheckInterval: 15s
#                     使Consul实例ID唯一，默认情况下，consul实例注册的ID等于其Spring Application Context ID。
#                     默认情况下，Spring Application Context ID为${spring.application.name}-${server.port}。
#                     对于大多数情况，这将允许一台服务的多个实例在一台计算机上运行。 如果需要进一步的唯一性，
#                     使用Spring Cloud可以通过在spring.cloud.consul.discovery.instanceId中提供唯一标识符来覆盖它。
#                     例如：
#        instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}

#    spring cloud config 分布式配置中心组件 client 角色配置 ===================================================== start
    config:
      label: master               # 指明远程仓库的分支
      profile: prod                # 指定某环境配置文件
      uri: http://localhost:9111  # 指明配置服务中心的网址
# 注意事项：
# 1 当前服务读取远程git配置文件，按当前服务的 spring.application.name 与 远程 git 中的 配置文件匹配读取，如当前情况下，读取配置文件为 config-client-{profile}.properties
# 2 关于 spring.cloud.config 的相关配置要放在 bootstrap.yml 文件中，否则会请求默认的config server配置，这是因为当加了配置中心，
#   服务就要去配置中心获取配置，此时，application.yml 还没有开始加载，bootstrap.yml的加载优先级比application.yml高，bootstrap.yml 是最先加载的。
#    spring cloud config 分布式配置中心组件 client 角色配置 ===================================================== end

server:
  port: 9112

#    实现客户端自动刷新获取服务端最新配置 ===================================================== start
management:
  security:
    shutdown:
      enabled: false  # 关闭刷新安全认证，springboot 1.5.X 以上默认开通了安全认证，所以需要添加这个配置
  endpoints:
    web:
      exposure:
        include: "*"  # springboot 2.x 默认只开启了info、health的访问，*代表开启所有访问
#    实现客户端自动刷新获取服务端最新配置 ===================================================== start
